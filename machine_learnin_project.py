# -*- coding: utf-8 -*-
"""machine learnin project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vl456nMf1dCafZJLCOBh_YJZ8Ohuwi8X
"""

# use pd.read_csv to read data
# In[85]:


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
train_data = pd.read_csv('train.csv',na_values=['NA'])
test_data = pd.read_csv('test.csv',na_values=['NA'])


#drop useless variables
train_data.drop('Id', axis=1,inplace= True)
#price = train_data['SalePrice']
#train_data.drop('SalePrice', axis=1,inplace= True)
test_data.drop('Id', axis=1,inplace= True)

"""# New Section"""

# In[86]:


#preprocess both datas
combined_data = [train_data, test_data]


# In[87]:


#check what values need to be changed to numerical values
for col in test_data.columns:
    if train_data[col].dtype != 'int64':
        print(col + ', ')
        print(train_data[col].unique())

#print(train_data['MSZoning'].unique())
#print(train_data['Street'].unique())


# In[88]:


#map all non numerical values into numerical values

#var[''] = var[''].
#var[''] = var[''].map({'':,}).astype(int)

for var in combined_data:
    var['MSZoning'] = var['MSZoning'].fillna('C (all)')
    var['MSZoning'] = var['MSZoning'].map({'RL':0, 'RM':1, 'C (all)':2, 'FV':3, 'RH':4})
    #var['MSZoning'] = var['MSZoning'].astype(int)
    var['LotFrontage'] = var['LotFrontage'].fillna(var['LotFrontage'].dropna().median())
    var['Street'] = var['Street'].map({'Pave':0, 'Grvl':1})
    #var['Street'] = var['Street'].astype(int)
    var['Alley'] = var['Alley'].fillna('abcde')
    var['Alley'] = var['Alley'].map({'abcde':0, 'Grvl':1, 'Pave':2})
    #var['Alley'] = var['Alley'].astype(int)
    var['LotShape'] = var['LotShape'].map({'Reg':0, 'IR1':1, 'IR2':2, 'IR3':3})
    #var['LotShape'] = var['LotShape'].astype(int)
    var['LandContour'] = var['LandContour'].map({'Lvl':0, 'Bnk':1, 'Low':2, 'HLS':3})
    #var['LandContour'] = var['LandContour'].astype(int)
    var['Exterior1st'] = var['Exterior1st'].fillna('VinylSd')
    var['Utilities'] = var['Utilities'].fillna('AllPub')
    var['Utilities'] = var['Utilities'].map({'AllPub':0, 'NoSeWa':1})
    #var['Utilities'] = var['Utilities'].astype(int)
    var['LotConfig'] = var['LotConfig'].map({'Inside':0, 'FR2':1, 'Corner':2, 'CulDSac':3, 'FR3':4})
    #var['LotConfig'] = var['LotConfig'].astype(int)
    var['LandSlope'] = var['LandSlope'].map({'Gtl':0, 'Mod':1, 'Sev':2})
    #var['LandSlope'] = var['LandSlope'].astype(int)
    var['Neighborhood'] = var['Neighborhood'].map({'CollgCr':0, 'Veenker':1, 'Crawfor':2, 'NoRidge':3, 'Mitchel':4, 'Somerst':5,
   'NWAmes':6, 'OldTown':7, 'BrkSide':8, 'Sawyer':9, 'NridgHt':10, 'NAmes':11,
   'SawyerW':12, 'IDOTRR':13, 'MeadowV':14, 'Edwards':15, 'Timber':16, 'Gilbert':17,
   'StoneBr':18, 'ClearCr':19, 'NPkVill':20, 'Blmngtn':21, 'BrDale':21, 'SWISU':22,
   'Blueste':23})
    #var['Neighborhood'] = var['Neighborhood'].astype(int)
    var['Condition1'] = var['Condition1'].map({'Norm':0, 'Feedr':1, 'PosN':2, 'Artery':3, 'RRAe':4, 'RRNn':5, 'RRAn':6, 'PosA':7,'RRNe':8})
    #var['Condition1'] = var['Condition1'].astype(int)
    var['Condition2'] = var['Condition2'].map({'Norm':0, 'Artery':1, 'RRNn':2, 'Feedr':3, 'PosN':4, 'PosA':5, 'RRAn':6, 'RRAe':7})
    #var['Condition2'] = var['Condition2'].astype(int)
    var['BldgType'] = var['BldgType'].map({'1Fam':0, '2fmCon':1, 'Duplex':2, 'TwnhsE':3, 'Twnhs':4})
    #var['BldgType'] = var['BldgType'].astype(int)
    var['HouseStyle'] = var['HouseStyle'].map({'2Story':0, '1Story':1, '1.5Fin':2, '1.5Unf':3, 'SFoyer':4, 'SLvl':5, '2.5Unf':6,
       '2.5Fin':7})
    #var['HouseStyle'] = var['HouseStyle'].astype(int)
    var['RoofStyle'] = var['RoofStyle'].map({'Gable':0, 'Hip':1, 'Gambrel':2, 'Mansard':3, 'Flat':4, 'Shed':5})
    #var['RoofStyle'] = var['RoofStyle'].astype(int)
    var['RoofMatl'] = var['RoofMatl'].map({'CompShg':0, 'WdShngl':1, 'Metal':2, 'WdShake':3, 'Membran':4, 'Tar&Grv':5,
       'Roll':6, 'ClyTile':7})
    #var['RoofMatl'] = var['RoofMatl'].astype(int)
    var['Exterior1st'] = var['Exterior1st'].fillna('VinylSd')
    var['Exterior1st'] = var['Exterior1st'].map({'VinylSd':0, 'MetalSd':1, 'Wd Sdng':2, 'HdBoard':3, 'BrkFace':4, 'WdShing':5,
       'CemntBd':6, 'Plywood':7, 'AsbShng':9, 'Stucco':10, 'BrkComm':11, 'AsphShn':12,
       'Stone':13, 'ImStucc':14, 'CBlock':15})
    #var['Exterior1st']  = var['Exterior1st'].astype(int)
    var['Exterior2nd'] = var['Exterior2nd'].fillna('VinylSd')
    var['Exterior2nd'] = var['Exterior2nd'].map({'VinylSd':0, 'MetalSd':1, 'Wd Shng':2, 'HdBoard':3, 'Plywood':4, 'Wd Sdng':5,
       'CmentBd':6, 'BrkFace':7, 'Stucco':8, 'AsbShng':9, 'Brk Cmn':10, 'ImStucc':11,
       'AsphShn':12, 'Stone':13, 'Other':14, 'CBlock':15})
    #var['Exterior2nd'] = var['Exterior2nd'].astype(int)
    var['MasVnrType'] = var['MasVnrType'].fillna('None')
    var['MasVnrType'] = var['MasVnrType'].map({'BrkFace':1, 'None':0, 'Stone':2, 'BrkCmn':3})
    #var['MasVnrType'] = var['MasVnrType'].astype(int)
    var['MasVnrArea'] = var['MasVnrArea'].fillna(var['MasVnrArea'].dropna().median())
    var['ExterQual'] = var['ExterQual'].map({'Gd':0, 'TA':1, 'Ex':2, 'Fa':3})
    #var['ExterQual'] = var['ExterQual'].astype(int)
    var['ExterCond'] = var['ExterCond'].map({'TA':0, 'Gd':1, 'Fa':2, 'Po':3, 'Ex':4})
    #var['ExterCond'] = var['ExterCond'].astype(int)
    var['Foundation'] = var['Foundation'].map({'PConc':0, 'CBlock':1, 'BrkTil':2, 'Wood':3, 'Slab':4, 'Stone':5})
    #var['Foundation'] = var['Foundation'].astype(int)
    var['BsmtQual'] = var['BsmtQual'].fillna('Gd')
    var['BsmtQual'] = var['BsmtQual'].map({'Gd':0, 'TA':1, 'Ex':2, 'Fa':3})
    #var['BsmtQual'] = var['BsmtQual'].astpye(int)
    var['BsmtCond'] = var['BsmtCond'].fillna('Gd')
    var['BsmtCond'] = var['BsmtCond'].map({'TA':0, 'Gd':1, 'Fa':2, 'Po':3})
    #var['BsmtCond'] = var['BsmtCond'].astype(int)
    var['BsmtExposure'] = var['BsmtExposure'].fillna('No')
    var['BsmtExposure'] = var['BsmtExposure'].map({'No':0, 'Gd':1, 'Mn':2, 'Av':3})
    #var['BsmtExposure'] = var['BsmtExposure'].astype(int)
    var['BsmtFinType1'] = var['BsmtFinType1'].fillna('GLQ')
    var['BsmtFinType1'] = var['BsmtFinType1'].map({'GLQ':0, 'ALQ':1, 'Unf':2, 'Rec':3, 'BLQ':4, 'LwQ':5})
    #var['BsmtFinType1'] = var['BsmtFinType1'].astype(int)
    var['BsmtFinSF1'] = var['BsmtFinSF1'].fillna(var['BsmtFinSF1'].dropna().median())
    var['BsmtFinType2'] = var['BsmtFinType2'].fillna('Unf')
    var['BsmtFinType2'] = var['BsmtFinType2'].map({'Unf':0, 'BLQ':1, 'ALQ':2, 'Rec':3, 'LwQ':4, 'GLQ':5})
    #var['BsmtFinType2'] = var['BsmtFinType2'].astype(int)
    var['BsmtFinSF2'] = var['BsmtFinSF2'].fillna(var['BsmtFinSF2'].dropna().median())
    var['BsmtUnfSF'] = var['BsmtUnfSF'].fillna(var['BsmtUnfSF'].dropna().median())
    var['TotalBsmtSF'] = var['TotalBsmtSF'].fillna(var['TotalBsmtSF'].dropna().median())
    var['Heating'] = var['Heating'].map({'GasA':0, 'GasW':1, 'Grav':2, 'Wall':3, 'OthW':4, 'Floor':5})
    #var['Heating'] = var['Heating'].astype(int)
    var['HeatingQC'] = var['HeatingQC'].map({'Ex':0, 'Gd':1, 'TA':2, 'Fa':3, 'Po':4})
    #var['HeatingQC'] = var['HeatingQC'].astype(int)
    var['CentralAir'] = var['CentralAir'].map({'Y':1,'N':0})
    #var['CentralAir'] = var['CentralAir'].astype(int)
    var['Electrical'] = var['Electrical'].fillna('FuseF')
    var['Electrical'] = var['Electrical'].map({'SBrkr':0, 'FuseF':1, 'FuseA':2, 'FuseP':3, 'Mix':4})
    #var['Electrical'] = var['Electrical'].astype(int)
    var['BsmtFullBath'] = var['BsmtFullBath'].fillna(var['BsmtFullBath'].dropna().median())
    var['BsmtHalfBath'] = var['BsmtHalfBath'].fillna(var['BsmtHalfBath'].dropna().median())
    var['KitchenQual'] = var['KitchenQual'].fillna('Gd')
    var['KitchenQual'] = var['KitchenQual'].map({'Gd':0, 'TA':1, 'Ex':2, 'Fa':3})
    #var['KitchenQual'] = var['KitchenQual'].astype(int)
    var['Functional'] = var['Functional'].fillna('Typ')
    var['Functional'] = var['Functional'].map({'Typ':0, 'Min1':1, 'Maj1':2, 'Min2':3, 'Mod':4, 'Maj2':5, 'Sev':6})
    #var['Functional'] = var['Functional'].astype(int)
    var['GarageType'] = var['GarageType'].fillna('Attchd')
    var['GarageType'] = var['GarageType'].map({'Attchd':0, 'Detchd':1, 'BuiltIn':2, 'CarPort':3, 'Basment':4, '2Types':5})
    #var['GarageType'] = var['GarageType'].astype(int)
    var['GarageYrBlt'] = var['GarageYrBlt'].fillna(var['GarageYrBlt'].dropna().median())
    var['GarageFinish'] = var['GarageFinish'].fillna('RFn')
    var['GarageFinish'] = var['GarageFinish'].map({'RFn':0, 'Unf':1, 'Fin':2})
    #var['GarageFinish'] = var['GarageFinish'].astype(int)
    var['GarageCars'] = var['GarageCars'].fillna(var['GarageCars'].dropna().median())
    var['GarageArea'] = var['GarageArea'].fillna(var['GarageArea'].dropna().median())
    var['GarageQual'] = var['GarageQual'].fillna('TA')
    var['GarageQual'] = var['GarageQual'].map({'TA':0, 'Fa':1, 'Gd':2, 'Ex':3, 'Po':4})
    #var['GarageQual'] = var['GarageQual'].astype(int)
    var['GarageCond'] = var['GarageCond'].fillna('TA')
    var['GarageCond'] = var['GarageCond'].map({'TA':0, 'Fa':1, 'Gd':2, 'Po':3, 'Ex':4})
    #var['GarageCond'] = var['GarageCond'].astype(int)
    var['PavedDrive'] = var['PavedDrive'].map({'Y':0, 'N':1, 'P':2})
    #var['PavedDrive'] = var['PavedDrive'].astype(int)
    var['PoolQC'] = var['PoolQC'].fillna('abcde')
    var['PoolQC'] = var['PoolQC'].map({'abcde':0,'Ex':1, 'Fa':2, 'Gd':3})
    #var['PoolQC'] = var['PoolQC'].astype(int)
    var['Fence'] = var['Fence'].fillna('abcde')
    var['Fence'] = var['Fence'].map({'abcde':0, 'MnPrv':1, 'GdWo':2, 'GdPrv':3, 'MnWw':4})
    #var['Fence'] = var['Fence'].astype(int)
    var['FireplaceQu'] = var['FireplaceQu'].fillna('abcde')
    var['FireplaceQu'] = var['FireplaceQu'].map({'abcde':0, 'TA':1, 'Gd':2, 'Fa':3, 'Ex':4, 'Po':5})
    #var['FireplaceQu'] = var['FireplaceQu'].astype(int)
    var['MiscFeature'] = var['MiscFeature'].fillna('abcde')
    var['MiscFeature'] = var['MiscFeature'].map({'abcde':0, 'Shed':1, 'Gar2':2, 'Othr':3, 'TenC':4})
    #var['MiscFeature'] = var['MiscFeature'].astype(int)
    var['SaleType'] = var['SaleType'].fillna('WD')
    var['SaleType'] = var['SaleType'].map({'WD':0, 'New':1, 'COD':2, 'ConLD':3, 'ConLI':4, 'CWD':5, 'ConLw':6, 'Con':7, 'Oth':8})
    #var['SaleType'] = var['SaleType'].astype(int)
    var['SaleCondition'] = var['SaleCondition'].fillna('Normal')
    var['SaleCondition'] = var['SaleCondition'].map({'Normal':0, 'Abnorml':1, 'Partial':2, 'AdjLand':3, 'Alloca':4, 'Family':5})
    #var['SaleCondition'] = var['SaleCondition'].astype(int)

# In[89]:


#test_data


# In[90]:


#train test split
from sklearn.model_selection import train_test_split
from sklearn import metrics

X_train, X_test, y_train, y_test = train_test_split(train_data.drop(['SalePrice'], axis=1), train_data['SalePrice'], test_size=0.2, random_state=77)


# In[91]:


#Using Linear Regression
from sklearn.linear_model import LinearRegression

reg = LinearRegression().fit(X_train, y_train)
reg.score(X_train, y_train)


# In[92]:


#Prediction Using Linear Regression
predictions_LR = reg.predict(X_test)
print(predictions_LR)

from sklearn.model_selection import learning_curve

train_sizes, train_scores, validation_scores = learning_curve(
    estimator = LinearRegression(),
    X = train_data.drop(['SalePrice'], axis=1),
    y = train_data['SalePrice'],
    cv = 5,
    scoring = 'neg_mean_squared_error',
    shuffle = True,
    random_state = 42,
    train_sizes = [0.1, 0.2, 0.4, 0.6, 0.8, 1]
)

train_scores_mean = -train_scores.mean(axis = 1)
validation_scores_mean = -validation_scores.mean(axis = 1)

import matplotlib.pyplot as plt

plt.style.use('seaborn')
plt.plot(train_sizes, train_scores_mean, label = 'Training error')
plt.plot(train_sizes, validation_scores_mean, label = 'Validation error')
plt.ylabel('MSE', fontsize = 14)
plt.xlabel('Training set size', fontsize = 14)
plt.title('Learning curves for a Linear Regression model', fontsize = 18, y = 1.03)
plt.legend()
plt.ylim(0,2100000000)
plt.show()

# In[93]:
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, predictions_LR))  
print('Mean Squared Error:', metrics.mean_squared_error(y_test, predictions_LR))  
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test,predictions_LR)))



# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:

from matplotlib import pyplot as plt


predictions_LR_price = reg.predict(train_data.drop(['SalePrice'], axis=1))

fig, ax = plt.subplots()
ind = np.arange(len(train_data['SalePrice']))
width = 0.35

rects1 = ax.bar(ind - width/2, train_data['SalePrice'], width, color='SkyBlue', label='Actual')
rects2 = ax.bar(ind + width/2, predictions_LR_price, width, color='Orange', label='Predicted')
ax.set_ylabel('SalePrice')
ax.set_title('Comparison of Actual vs Predicted SalePrice')
ax.set_xticks(ind)
ax.legend()

plt.show()

from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestRegressor

# Define the hyperparameter grid
param_grid = {'n_estimators': [100, 200, 300],
              'max_depth': [None, 10, 20],
              'min_samples_split': [2, 5, 10]}

# Create a Random Forest Regressor object
rfr = RandomForestRegressor(random_state=1)

# Create a GridSearchCV object
grid_search = GridSearchCV(rfr, param_grid, cv=5, n_jobs=-1)

# Fit the GridSearchCV object to the data
grid_search.fit(X_train, y_train)

# Print the best hyperparameters
print(grid_search.best_params_)

#Using Random Forest Regressor
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics



from sklearn.ensemble import RandomForestRegressor

# create the model with the desired parameters
rfr = RandomForestRegressor( random_state=1)

# train the model with feature names
rfr.fit(X_train, y_train)

# make predictions with the model
y_pred = rfr.predict(X_test)
predictions_rfr = rfr.predict(test_data)



from sklearn.model_selection import learning_curve

train_sizes, train_scores, test_scores = learning_curve(
    estimator=rfr, X=X_train, y=y_train, cv=5, scoring='neg_mean_squared_error', 
    n_jobs=-1, train_sizes=np.linspace(0.1, 1.0, 10))

train_mean = -np.mean(train_scores, axis=1)
train_std = np.std(train_scores, axis=1)
test_mean = -np.mean(test_scores, axis=1)
test_std = np.std(test_scores, axis=1)

plt.plot(train_sizes, train_mean, color='blue', marker='o', markersize=5, label='training error')
plt.fill_between(train_sizes, train_mean - train_std, train_mean + train_std, alpha=0.15, color='blue')

plt.plot(train_sizes, test_mean, color='green', linestyle='--', marker='s', markersize=5, label='validation error')
plt.fill_between(train_sizes, test_mean - test_std, test_mean + test_std, alpha=0.15, color='green')

plt.xlabel('Number of training samples')
plt.ylabel('Negative Mean Squared Error')
plt.legend(loc='upper right')
plt.show()



print(predictions_rfr)


print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test,y_pred)))

# In[7]:


from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import learning_curve
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.optimizers import Adamax

def plot_learning_curve(history):
    plt.plot(history.history['loss'], label='Training loss')
    plt.plot(history.history['val_loss'], label='Validation loss')
    plt.title('Learning curve')
    plt.xlabel('Epochs')
    plt.ylabel('MSE')
    plt.legend()
    plt.show()

# Normalize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
from tensorflow.keras import regularizers

# Build the neural network with L2 regularization
model = Sequential()

model.add(Dense(32, activation='relu',kernel_regularizer=regularizers.l2(0.001)))
model.add(Dense(64, activation='relu',kernel_regularizer=regularizers.l2(0.001)))
model.add(Dense(128, activation='relu',  input_shape=(X_train.shape[1],)))
model.add(Dense(64, activation='relu',kernel_regularizer=regularizers.l2(0.001)))
model.add(Dense(32, activation='relu',kernel_regularizer=regularizers.l2(0.001)))

model.add(Dense(1, activation='linear'))

# Compile the model
model.compile(loss='mean_squared_error', optimizer='adam')

# Train the model
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=14, batch_size=32)




# Plot the learning curve
plot_learning_curve(history)



# Evaluate the model on test data
mse = model.evaluate(X_test, y_test)
print("Mean Squared Error: ", mse)

import matplotlib.pyplot as plt
import numpy as np

predictions_neural_price = model.predict(train_data.drop(['SalePrice'], axis=1))
predictions_neural_price = predictions_neural_price.reshape(-1)

plt.scatter(train_data['SalePrice'], predictions_neural_price)
plt.xlabel('Actual Sale Price')
plt.ylabel('Predicted Sale Price')
plt.title('Actual vs Predicted Sale Prices')
plt.ylim(0,500000000)

# Calculate the line of best fit
m, b = np.polyfit(train_data['SalePrice'], predictions_neural_price, 1)
plt.plot(train_data['SalePrice'], m*train_data['SalePrice'] + b, color='red')

plt.show()


#predictions_neural_price = model.predict(train_data.drop(['SalePrice'], axis=1))
#predictions_neural_price = predictions_neural_price.reshape(-1)

# Calculate the difference between actual and predicted values
#diff = train_data['SalePrice'] - predictions_neural_price

#fig, ax = plt.subplots()
#ind = np.arange(len(train_data['SalePrice']))
#width = 0.35

# Plot the difference as a bar chart
#rects1 = ax.bar(ind, diff, width, color='SkyBlue')
#ax.axhline(y=0, color='gray', linestyle='--')  # Add a horizontal line at y=0
#ax.set_ylabel('Difference')
#ax.set_title('Actual vs Predicted SalePrice')
#ax.set_xticks(ind)
#plt.show()

